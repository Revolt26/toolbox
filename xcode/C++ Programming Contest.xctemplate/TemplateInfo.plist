<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Identifier</key>
	<string>com.furushchev.xctemplate.procon</string>
	<key>Concrete</key>
	<true/>
	<key>Description</key>
	<string>This template builds C++ for Programming Contest</string>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.base</string>
		<string>com.apple.dt.unit.macBase</string>
	</array>
	<key>Targets</key>
	<array>
		<dict>
			<key>ProductType</key>
			<string>com.apple.product-type.tool</string>
			<key>BuildPhases</key>
			<array>
				<dict>
					<key>Class</key>
					<string>Sources</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>Frameworks</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>CopyFiles</string>
					<key>buildActionMask</key>
					<string>12</string>
					<key>DstSubfolderSpec</key>
					<string>16</string>
					<key>RunOnlyForDeploymentPostprocessing</key>
					<string>NO</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>commandLineType</string>
			<key>Name</key>
			<string>Type</string>
			<key>Description</key>
			<string>The type of command-line tool to create</string>
			<key>Default</key>
			<string>C++</string>
			<key>Type</key>
			<string>popup</string>
			<key>Units</key>
			<dict>
				<key>C++</key>
				<dict>
					<key>Nodes</key>
					<array>
						<string>main.cpp:comments</string>
						<string>main.cpp:include</string>
						<string>main.cpp:main:content</string>
						<string>test.in</string>
						<string>test.out</string>
					</array>
					<key>Definitions</key>
					<dict>
						<key>main.cpp:include</key>
						<string>

#include &lt;algorithm&gt;
#include &lt;bitset&gt;
#include &lt;cctype&gt;
#include &lt;chrono&gt;
#include &lt;cmath&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;ctime&gt;
#include &lt;deque&gt;
#include &lt;fstream&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;list&gt;
#include &lt;map&gt;
#include &lt;memory&gt;
#include &lt;numeric&gt;
#include &lt;queue&gt;
#include &lt;set&gt;
#include &lt;sstream&gt;
#include &lt;stack&gt;
#include &lt;string&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

using namespace std;

inline int to_int(string s) { int v; istringstream sin(s); sin &gt;&gt; v; return v; }
template &lt;class T&gt; inline string to_str(T x) { ostringstream sout; sout &lt;&lt; x; return sout.str(); }

#define dotimes(i, n) for (int i = 0; i &lt; (n); ++i)
#define dolist(i, c) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)
#define exists(e, s) ((s).find(e) != (s).end())
#define pprint(x) cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; " (L" &lt;&lt; __LINE__ &lt;&lt; ")" &lt;&lt; " " &lt;&lt; __FILE__ &lt;&lt; endl;
#define startswith(sub, str) (((str).size() &gt;= (sub).size() &amp;&amp; equal((sub).begin(), (sub).end(), (str).begin())))
#define endswith(sub, str) (((str).size() &gt;= (sub).size() &amp;&amp; (str).find((sub), (str).size() - (sub).size()) != string::npos))

</string>
						<key>main.cpp:main:content</key>
						<string>


int solve(int argc, const char* argv[], istream &amp;ifs, ostream &amp;ofs) {
    // code is started from here:

    return 0;
}

int main(int argc, const char * argv[]) {
    // for performance
    cin.tie(nullptr);
    ios::sync_with_stdio(false);
    cout&lt;&lt;fixed&lt;&lt;setprecision(20);

    const bool is_test_mode = false;
    const string test_file_name = &quot;test&quot;;

    if (is_test_mode) {
      ifstream ifs( test_file_name + &quot;.in&quot; );
      ofstream ofs( test_file_name + &quot;.out&quot; );
      return solve(argc, argv, ifs, ofs);
    } else {
      return solve(argc, argv, cin, cout);
    }

    return 0;
}</string>
					</dict>
				</dict>
			</dict>
		</dict>
	</array>
	<key>Definitions</key>
	<dict>
		<key>test.in</key>
		<dict>
			<key>Path</key>
			<string>test.in</string>
		</dict>
		<key>test.out</key>
		<dict>
			<key>Path</key>
			<string>test.out</string>
		</dict>
	</dict>
</dict>
</plist>
